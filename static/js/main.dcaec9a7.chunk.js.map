{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"4LAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,mBACNC,SAAU,eAyBHE,EAbO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARpC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAGlBA,EAAM,EAAI,SAAW,UAGH,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACA,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC3BdU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCTTG,G,iNACFC,MAAQ,CAAEV,IAAI,KAAMW,aAAc,I,mFAEb,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,mBACzB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,YACjD,SAAAC,GAAG,OAAK,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,c,sCAK9C,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAChC,uCAAaqB,KAAKX,MAAMC,eAE9BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAChC,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAEvC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAMpB,OACI,yBAAKF,UAAU,cACVgB,KAAKC,qB,GAzBJC,IAAMC,YAiCxBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.dcaec9a7.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: \"Let's hit the beach!\",\n        iconName: 'sun'\n    },\n    winter: {\n        text: 'Burr it is cold!',\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n    if(month > 2 && month < 9) {\n     return lat > 0 ? 'summer' : 'winter';\n        //lat>0為true就return summer 反之winter\n    } else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n}\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n\n    return (\n    <div className={`season-display ${season}`}>\n        <i className={`icon-left massive ${iconName} icon`} />\n        <h1>{text}</h1>\n        <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n    );\n};\n\nexport default SeasonDisplay;","import React from 'react';\n\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">{props.message}</div>\n        </div>\n    );\n};\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\nimport { directive } from '@babel/types';\n\nclass App extends React.Component {\n    state = { lat:null, errorMessage: ''};\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({ lat: position.coords.latitude }),\n            err =>  this.setState({ errorMessage: err.message })        \n          );\n    }\n\n    renderContent() {\n        if (this.state.errorMessage && !this.state.lat) {\n            return <div>Error: {this.state.errorMessage}</div>;\n        }\n        if (!this.state.errorMessage && this.state.lat) {\n            return <SeasonDisplay lat={this.state.lat} />\n    }\n    return <Spinner message=\"Please accept location request\"/>;\n}\n\n\n     //React says we have to define render!\n    render() {\n        return (\n            <div className=\"border red\">\n                {this.renderContent()}\n            </div>\n            \n        );\n    }\n}\n\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n);"],"sourceRoot":""}